$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

@mixin bdesktop {
  @media (min-width: #{$big-desktop-width}) {
    @content;
  }
}

// MQS

@mixin mq ($mquery) {
  
  $media-xxs:"(min-width : 320px)"; // iPhone Retina 
  $media-xs: "(min-width : 480px)"; // Telefonos
  $media-sm: "(min-width: 768px)";  // Tablets
  $media-md: "(min-width: 992px)"; // Escritorios
  $media-lg: "(min-width: 1200px)"; // Resoluciones grandes
  
  @if $mquery == xxs {
    @media #{$media-xxs} { @content; }
  }
  @if $mquery == xs {
    @media #{$media-xs} { @content; }
  }
  @else if $mquery == sm {
    @media #{$media-sm} { @content; }
  }
  @else if $mquery == md {
    @media #{$media-md}  { @content; }
  }
  @else if $mquery == lg {
    @media #{$media-lg}  { @content; }
  }
}

@mixin bgcover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}

@mixin coverAbsolute ($z) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $z;
}

@mixin bgparallax {
  background-attachment: fixed;
  background-size: cover;
  background-position: center top;
}

@mixin iconSVG($path, $size){
  background-image: url($path);
  background-size: $size;
  background-repeat: no-repeat;
  background-position: center center;
  text-indent: -999999px;
  overflow: hidden;
}

// Clearfix mixin
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin cont {
  width: 100%;
  margin: 0 auto;
  max-width: 1300px;
}

// Define default font size
@function rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1.6rem;
}

@mixin font($size) {
  font-size: $size;
  font-size: rem($size);
}

// Gradients
@mixin background-gradient($start-color, $end-color, $orientation) { 
    background: $start-color;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

// Arrows
@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;
    
    @if $direction == 'top' {
        border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
      border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
      border-right: $size solid $color;
      border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color; 
        border-right: $size solid transparent;  
    } @else if $direction == 'top-right' {
        border-top: $size solid $color; 
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color; 
        border-right: $size solid transparent;  
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color; 
        border-left: $size solid transparent;
    }
}

// Pseudo
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;
  
  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

// Placeholders

@mixin placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}  
}

// Layout wrapper
@mixin wrapper {
  max-width: 1242px;
  margin: 0 auto;
}

// Buttons
@mixin defBtn($size, $padding, $color, $bg, $hover) {
  display: inline-block;
  font-size: $size;
  padding: 8px $padding;
  border: 1px solid;
  font-family: $td-cn-18;
  text-align: center;
  color: $color;
  background-color: $bg;
  transition: all 0.4s;
  border-radius: 0;
  cursor: pointer;
  &:hover {
    background-color: $hover;
    color: $color;
  }
}


@mixin form-field-style{
  background-color: $gray-field;
  padding-top: 10px;
  padding-bottom: 10px;
  border-left: 0 !important;
  border-right: 0 !important;
  border-top: 0 !important;
  border-bottom: 2px solid $border-yellow !important;
  border-radius: 0;
  height: initial;
  color: $white;
  @include font(14px);

  &.error{
    border-bottom: 2px solid $red !important;
    &.form-control::placeholder
    {
      text-transform: uppercase;
      color: $red;
    }
  }

  &.form-control::placeholder
  {
    text-transform: uppercase;
    color: $white;
  }

  &:focus{
    box-shadow:  none;
  }
}

@mixin button-basic{
  transform: skew(-15deg);
  padding: 12px 20px;
  border-radius: 0;
  text-transform: uppercase;
  min-width: 140px;
  .text-button{
    transform: skew(15deg);
    text-align: center;
    @include font(20px);
    line-height: 1;
  }

  &:hover{
    text-decoration: none;
    cursor: pointer;
  }

  &:focus{
    text-decoration: none;
  }
}

@mixin button-red{
  @include button-basic();
  background: $red;
  color: $white;
  border: 0px solid $red;
  &:hover{
    .text-button{
      color: $black;
    }
  }
}

@mixin button-yellow{
  @include button-basic();
  background: $yellow-link-menu;
  border: 0px solid $yellow-link-menu;
  &:hover{
    .text-button{
      color: $red;
    }
  }
  .text-button{
    color: $black;
  }
}

@mixin button-border-red{
  @include button-basic();
  padding: 11px 20px;
  background: transparent;
  border: 1px solid $red;
  color:$black;
  width:max-content;
  @include font(20px);
  &:hover{
    .text-button{
      color: $red;
    }
  }
}

@mixin button-blue{
  @include button-basic();
  background: $blue-facebook;
}

@mixin wrapper-main{
  max-width: 1242px;
  margin-left: auto;
  margin-right: auto;
}

@mixin wrapper-internal{
  max-width: 1000px;
  margin-left: auto;
  margin-right: auto;
}


@mixin remove-banner-from-body{
  .main-container{
    
    #page-header{
      display: none;
    }

    >div.row{
      background-color: transparent;
      margin-top: 0px;
    }
  }
}

@mixin label-checkbox-span{
  /* Customize the label (the container) */  
  display: block;
  position: relative;
  padding-left: 30px;
  margin-bottom: 12px;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;

  /* Hide the browser's default checkbox */
  input{
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
    margin: 0;
    padding: 0;
    &:checked ~ .checkmark {
      background-color: $red;
    }
  }

  /* Create a custom checkbox */
  .checkmark {
    position: absolute;
    top: 3px;
    left: 0;
    height: 15px;
    width: 15px;
    background-color: $red;
    &:after {
      position: absolute;
      display: none;
      left: 6px;
      top: 2px;
      width: 5px;
      height: 10px;
      border: solid white;
      border-width: 0 3px 3px 0;
      -webkit-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
      transform: rotate(45deg);
      content: ' ';
    }
  }

  &:hover input ~ .checkmark {
    background-color: $red;
  }

  input:checked ~ .checkmark:after {
    display: block;
  }
}